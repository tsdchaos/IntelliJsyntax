Overloading:
- methods have the same name, but different parameters (number, type, order)
- When methods with the same name exist in a class multiple times with different number of parameters or different sequence
of parameters or different data types, then it is called overloading the method or method overloading
- Allows for cleaner code, easier to read code
- Allows for more flexible code

Rules:
    - Access modifiers (public, private, default, protected) do not play any role in method overloading
    - Non-access modifiers (static, final) also do not play any role in method overloading
    - Method return types (int, String, boolean, etc) also do not play any roles in method overloading
    - We can't overload a method by just changing the return type
    - Method names must be the same if we want to overload a method
    - parameters should be different for each method either in number, sequence, or data type
    - We can overload constructors as well, in much the same way

=======================================================================================================
Overriding:
    Overriding happens when same methods exists in parent and child classes
Benefits:
    - We can have specific implementation for a method that is already defined in the Parent class. That we have this
    flexibility that we don't have to come up with different names if we are doing same thing again in the Child classes
Rules:
    - We can change the access modifier in child class but we can make it only less restrictive. For example, we can change
    protected or default to public but we can not do the reverse
    -Static methods have the same rules, but we use a different terminology we say we are re-declaring a method instead of
    overriding
    - Return types must be the same in overriding
    - The name must be the same
    - Parameters should also be the same.
    - We cant override a private method/field or constructor because they don't participate in inheritance
    - We can't override main method, but we can re-declare it
Special Note:
You can override and overload in the same class
